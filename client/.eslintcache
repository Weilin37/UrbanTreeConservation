[{"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\index.js":"1","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\store\\index.js":"2","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\App.js":"3","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\NavBar.js":"4","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Map.js":"5","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\mapSlice.js":"6","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\markerSlice.js":"7","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\SearchBar.js":"8","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\RescanMarkers.js":"9"},{"size":290,"mtime":1607204859726,"results":"10","hashOfConfig":"11"},{"size":601,"mtime":1607723585108,"results":"12","hashOfConfig":"11"},{"size":588,"mtime":1607723585099,"results":"13","hashOfConfig":"11"},{"size":848,"mtime":1607441961650,"results":"14","hashOfConfig":"11"},{"size":6738,"mtime":1607706076982,"results":"15","hashOfConfig":"11"},{"size":2016,"mtime":1607723585105,"results":"16","hashOfConfig":"11"},{"size":2101,"mtime":1607705985581,"results":"17","hashOfConfig":"11"},{"size":2310,"mtime":1607723585103,"results":"18","hashOfConfig":"11"},{"size":664,"mtime":1607705985593,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"9yxsz4",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\index.js",[],["42","43"],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\store\\index.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\App.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\NavBar.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Map.js",["44","45"],"import React, { useEffect } from \"react\";\r\nimport RescanMarkers from \"./RescanMarkers\";\r\nimport { Map, Marker, Popup, TileLayer, Circle, Rectangle } from \"react-leaflet\";\r\nimport \"../../css/app.css\";\r\nimport { useSelector, useDispatch, batch } from \"react-redux\";\r\nimport { getCities, getTrees, setEndpoint, clearTrees } from \"../features/markerSlice\";\r\nimport { setSearchBounds, setZoom, setCenter } from \"../features/mapSlice\";\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\n\r\nexport const LeafMap = () => {\r\n    // Parameters\r\n    const clusterZoom = 10;\r\n    const treeZoom = 16;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //marker state\r\n    const stateMarker = useSelector(state => state.marker);\r\n    // map state\r\n    const stateMap = useSelector(state => state.map);\r\n\r\n    // Effects\r\n    useEffect(() => {\r\n        dispatch(getCities(\"/api/get/cities\"));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (stateMap.zoom >= clusterZoom) {\r\n           dispatch(getTrees(stateMarker.endpoint));\r\n        }\r\n    }, [stateMarker.endpoint]);\r\n\r\n    function toRadian(degree) {\r\n        return degree*Math.PI/180;\r\n    }\r\n\r\n    function getDistance(origin, destination) {\r\n        // return distance in meters\r\n        var lon1 = toRadian(origin[1]),\r\n            lat1 = toRadian(origin[0]),\r\n            lon2 = toRadian(destination[1]),\r\n            lat2 = toRadian(destination[0]);\r\n\r\n        var deltaLat = lat2 - lat1;\r\n        var deltaLon = lon2 - lon1;\r\n\r\n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\r\n        var c = 2 * Math.asin(Math.sqrt(a));\r\n        var EARTH_RADIUS = 6371;\r\n        return c * EARTH_RADIUS * 1000;\r\n    }\r\n\r\n    function handlemoveend(e) {\r\n        const map = e.target;\r\n        const zoom = map.getZoom();\r\n        const lat = map.getCenter().lat;\r\n        const lng = map.getCenter().lng;\r\n\r\n        const bounds = map.getBounds();\r\n        const latNE = bounds['_northEast'].lat\r\n        const lngNE = bounds['_northEast'].lng\r\n        const latSW = bounds['_southWest'].lat\r\n        const lngSW = bounds['_southWest'].lng\r\n        const outOfBounds = (lat > stateMap.searchLatNE || lat < stateMap.searchLatSW || lng > stateMap.searchLngNE || lng < stateMap.searchLngSW)\r\n\r\n        if (zoom < clusterZoom) {\r\n            batch(() => {\r\n               dispatch(clearTrees());\r\n               dispatch(setCenter({lat:lat, lng:lng}));\r\n               dispatch(setZoom(zoom));\r\n               dispatch(setSearchBounds({latNE:0, lngNE:0, latSW:0, lngSW:0}));\r\n               dispatch(setEndpoint({type:\"cities\"}))\r\n            });\r\n        }\r\n        else {\r\n            if (outOfBounds) {\r\n                batch(() => {\r\n                    dispatch(clearTrees());\r\n                    dispatch(setCenter({lat:lat, lng:lng}));\r\n                    dispatch(setZoom(zoom));\r\n                    dispatch(setEndpoint({type:\"trees\", lat:lat, lng:lng, latbnd:latNE, lngbnd:lngNE, limit:5000}));\r\n                    dispatch(setSearchBounds({latNE:latNE, lngNE:lngNE, latSW:latSW, lngSW:lngSW}));\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Custom map components\r\n    const DrawBounds = () => {\r\n        //const fillGreen = { color: 'green', fillColor: null, fillOpacity: 0 }\r\n        if (stateMap.zoom >= clusterZoom) {\r\n            return <Circle\r\n                    fill={false}\r\n                    center={[stateMap.lat, stateMap.lng]}\r\n                    radius={0.5*getDistance([stateMap.searchLatNE, stateMap.searchLngNE],[stateMap.lat, stateMap.lng])} />\r\n        } else {\r\n            return null\r\n        }\r\n\r\n    }\r\n    const GetMarkers = () => {\r\n        const zoom = stateMap.zoom;\r\n\r\n        if (zoom < clusterZoom){\r\n            return stateMarker.cities.map((el, i) => (\r\n              <Marker\r\n                key={i}\r\n                position={[el.latitude, el.longitude]}\r\n              >\r\n                <Popup>\r\n                    <p>City: {el.city}</p>\r\n                    <p>State: {el.state}</p>\r\n                    <p>Number of Trees: {el.num_trees}</p>\r\n                </Popup>\r\n              </Marker>\r\n            ));\r\n        } else if (zoom < treeZoom && zoom >= clusterZoom) {\r\n                return (\r\n                <MarkerClusterGroup disableClusteringAtZoom={treeZoom} spiderfyOnMaxZoom={false}>\r\n                    {stateMarker.trees.map((el, i) => (\r\n                      <Circle key={i} center={[el.latitude, el.longitude]} radius={5} color={\"green\"}>\r\n                        <Popup>\r\n                            <p>City: {el.city}</p>\r\n                            <p>State: {el.state}</p>\r\n                            <p>Scientific Name: {el.scientific_name}</p>\r\n                            <p>Native: {el.native}</p>\r\n                            <p>Condition: {el.condition}</p>\r\n                            <p>Diameter Breast Height (CM): {el.diameter_breast_height_cm}</p>\r\n                        </Popup>\r\n                      </Circle>\r\n                    ))}\r\n                </MarkerClusterGroup>\r\n                )\r\n        } else if (zoom >= treeZoom ) {\r\n            return stateMarker.trees.map((el, i) => (\r\n              <Circle key={i} center={[el.latitude, el.longitude]} radius={10} color={\"green\"}>\r\n                <Popup>\r\n                    <p>City: {el.city}</p>\r\n                    <p>State: {el.state}</p>\r\n                    <p>Scientific Name: {el.scientific_name}</p>\r\n                    <p>Native: {el.native}</p>\r\n                    <p>Condition: {el.condition}</p>\r\n                    <p>Diameter Breast Height (CM): {el.diameter_breast_height_cm}</p>\r\n                </Popup>\r\n              </Circle>\r\n            ))\r\n        }\r\n    };\r\n\r\n    // render component\r\n    if (stateMarker.cities.length > 0) {\r\n        return (\r\n            <Map onmoveend={handlemoveend} preferCanvas={true} center={[stateMap.lat, stateMap.lng]} zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n              <DrawBounds />\r\n              <GetMarkers />\r\n              <RescanMarkers />\r\n            </Map>\r\n        );\r\n    } else {\r\n        return (\r\n            <Map center={[stateMap.lat, stateMap.lng]} zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n              <RescanMarkers />\r\n            </Map>\r\n        );\r\n    }\r\n\r\n}","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\mapSlice.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\markerSlice.js",["46"],"import { createSlice,createSelector,createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\n\r\n// CREATE Thunk\r\nexport const getCities = createAsyncThunk(\"markers/getCities\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\nexport const getTrees = createAsyncThunk(\"markers/getTrees\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\n// CREATE SLICE\r\nconst markerSlice = createSlice({\r\n  name: \"markers\",\r\n  initialState: {\r\n    cities: [],\r\n    trees: [],\r\n    endpoint: \"/api/get/cities\",\r\n  },\r\n  reducers: {\r\n    setEndpoint: (state, action) => {\r\n        if (action.payload.type === \"cities\") {\r\n            state.endpoint = \"/api/get/cities\"\r\n        } else if (action.payload.type === \"trees\") {\r\n            state.endpoint = \"/api/get/trees?lat=\"+action.payload.lat+\"&lng=\"+action.payload.lng+\"&latbnd=\"+action.payload.latbnd+\"&lngbnd=\"+action.payload.lngbnd+\"&limit=\"+action.payload.limit\r\n        }\r\n    },\r\n    clearTrees: (state) => {\r\n        state.trees = [];\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getCities.pending, (state) => {\r\n        state.cities = [];\r\n    });\r\n    builder.addCase(getCities.fulfilled, (state, { payload }) => {\r\n        state.cities = payload;\r\n    });\r\n    builder.addCase(getCities.rejected,(state, action) => {\r\n        state.loading = \"error\";\r\n    });\r\n    builder.addCase(getTrees.pending, (state) => {\r\n        state.trees = [];\r\n    });\r\n    builder.addCase(getTrees.fulfilled, (state, { payload }) => {\r\n        state.trees = payload;\r\n    });\r\n    builder.addCase(getTrees.rejected,(state, action) => {\r\n        state.loading = \"error\";\r\n    });\r\n  }\r\n});\r\n\r\nexport const { setEndpoint, clearTrees } = markerSlice.actions;\r\n\r\nexport default markerSlice","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\SearchBar.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\RescanMarkers.js",["47"],"import { fade, makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    top: theme.spacing(16),\r\n    left: theme.spacing(1),\r\n    position: 'fixed',\r\n    zIndex: 1000,\r\n  }\r\n}));\r\n\r\n\r\nconst RescanMarkers = () => {\r\n    // classes\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Fab size=\"small\" color=\"secondary\" aria-label=\"add\" className={classes.margin}>\r\n                <AddIcon />\r\n            </Fab>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RescanMarkers;",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":3,"column":49,"nodeType":"54","messageId":"55","endLine":3,"endColumn":58},{"ruleId":"56","severity":1,"message":"57","line":31,"column":8,"nodeType":"58","endLine":31,"endColumn":30,"suggestions":"59"},{"ruleId":"52","severity":1,"message":"60","line":1,"column":22,"nodeType":"54","messageId":"55","endLine":1,"endColumn":36},{"ruleId":"52","severity":1,"message":"61","line":1,"column":10,"nodeType":"54","messageId":"55","endLine":1,"endColumn":14},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'Rectangle' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'stateMap.zoom'. Either include them or remove the dependency array.","ArrayExpression",["64"],"'createSelector' is defined but never used.","'fade' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},"Update the dependencies array to be: [dispatch, stateMap.zoom, stateMarker.endpoint]",{"range":"67","text":"68"},[1050,1072],"[dispatch, stateMap.zoom, stateMarker.endpoint]"]