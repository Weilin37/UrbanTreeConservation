[{"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\index.js":"1","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\store\\index.js":"2","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\App.js":"3","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\NavBar.js":"4","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\mapSlice.js":"5","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\analysisSlice.js":"6","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\markerSlice.js":"7","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Map.js":"8","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\SearchBar.js":"9","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawBounds.js":"10","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawSimilarityButtons.js":"11","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\FreeDrawCustom.js":"12","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawAnalysisNative.js":"13","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\RescanMarkers.js":"14","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\FreeDrawButtons.js":"15","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DataViewButtons.js":"16","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\GetMarkers.js":"17","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawAnalysisSimilarity.js":"18"},{"size":290,"mtime":1610726607207,"results":"19","hashOfConfig":"20"},{"size":695,"mtime":1610726607223,"results":"21","hashOfConfig":"20"},{"size":426,"mtime":1610726607208,"results":"22","hashOfConfig":"20"},{"size":848,"mtime":1610726607217,"results":"23","hashOfConfig":"20"},{"size":1947,"mtime":1610726607221,"results":"24","hashOfConfig":"20"},{"size":2524,"mtime":1610726607220,"results":"25","hashOfConfig":"20"},{"size":4791,"mtime":1614959604629,"results":"26","hashOfConfig":"20"},{"size":2124,"mtime":1614961589754,"results":"27","hashOfConfig":"20"},{"size":2381,"mtime":1610726607219,"results":"28","hashOfConfig":"20"},{"size":565,"mtime":1610726607212,"results":"29","hashOfConfig":"20"},{"size":4454,"mtime":1610726607213,"results":"30","hashOfConfig":"20"},{"size":5284,"mtime":1614961694570,"results":"31","hashOfConfig":"20"},{"size":6681,"mtime":1614957754384,"results":"32","hashOfConfig":"20"},{"size":3254,"mtime":1614955054447,"results":"33","hashOfConfig":"20"},{"size":2694,"mtime":1614961645458,"results":"34","hashOfConfig":"20"},{"size":2305,"mtime":1614955054436,"results":"35","hashOfConfig":"20"},{"size":5937,"mtime":1614960122846,"results":"36","hashOfConfig":"20"},{"size":2089,"mtime":1610726607211,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"9yxsz4",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"40"},"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\index.js",[],["82","83"],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\store\\index.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\App.js",["84","85"],"import React from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport { LeafMap } from \"./Map\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { VictoryBar } from 'victory';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst App = () => (\r\n  <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n    <NavBar />\r\n    <Grid item align=\"center\" xs={12} ><LeafMap /></Grid>\r\n  </Grid>\r\n);\r\n\r\nexport default App;","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\NavBar.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\mapSlice.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\analysisSlice.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\markerSlice.js",["86"],"import { createSlice,createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\n\r\n// CREATE Thunk\r\nexport const getGlobal = createAsyncThunk(\"markers/getGlobal\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\nexport const getCity = createAsyncThunk(\"markers/getCity\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\nexport const getFreeDraw = createAsyncThunk(\"markers/getFreeDraw\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\n// CREATE SLICE\r\nconst markerSlice = createSlice({\r\n  name: \"markers\",\r\n  initialState: {\r\n    global: [],\r\n    city: [],\r\n    freedraw: [],\r\n    endpoint: \"/api/get/global\",\r\n    scan_status: \"waiting\",\r\n    scan_radius: 0,\r\n    scan_lat: 37.8,\r\n    scan_lng: -96,\r\n    scan_zoom: 3,\r\n    cityZoom: 10,\r\n    treeZoom: 16,\r\n    view_status: \"global\",\r\n    previous_view_status: \"global\",\r\n  },\r\n  reducers: {\r\n    setEndpoint: (state, action) => {\r\n        if (action.payload.type === \"global\") {\r\n            state.endpoint = \"/api/get/global\"\r\n        } else if (action.payload.type === \"city\") {\r\n            state.endpoint = \"/api/get/city?lat=\"+action.payload.lat+\"&lng=\"+action.payload.lng+\"&radius=\"+action.payload.radius+\"&limit=\"+action.payload.limit\r\n        } else if (action.payload.type === \"freedraw\") {\r\n            state.endpoint = \"/api/get/freedraw?lat=\"+action.payload.lat+\"&lng=\"+action.payload.lng+\"&radius=\"+action.payload.radius+\"&polygons=\"+action.payload.polygons;\r\n        }\r\n    },\r\n    clearCity: (state) => {state.city = [];},\r\n    clearFreeDraw: (state) => {state.freedraw = [];},\r\n    setScanStatus: (state, action) => {state.scan_status = action.payload;},\r\n    setViewStatus: (state, action) => {\r\n        state.previous_view_status = state.view_status;\r\n        state.view_status = action.payload;\r\n    },\r\n    setScanRadius: (state, action) => {state.scan_radius = action.payload;},\r\n    setScanZoom: (state, action) => {state.scan_zoom = action.payload;},\r\n    setScanCenter: (state, action) => {\r\n        state.scan_lat = action.payload.lat;\r\n        state.scan_lng = action.payload.lng;\r\n    },\r\n    setScanLng: (state, action) => {state.scan_lng = action.payload;},\r\n  },\r\n  extraReducers: (builder) => {\r\n    // global\r\n    builder.addCase(getGlobal.pending, (state) => {\r\n        state.global = [];\r\n    });\r\n    builder.addCase(getGlobal.fulfilled, (state, { payload }) => {\r\n        state.global = payload;\r\n    });\r\n    builder.addCase(getGlobal.rejected,(state, action) => {\r\n        state.loading = \"error\";\r\n    });\r\n    // city\r\n    builder.addCase(getCity.pending, (state) => {\r\n        state.city = [];\r\n    });\r\n    builder.addCase(getCity.fulfilled, (state, { payload }) => {\r\n        payload = payload.map(function(o) {\r\n          o.position = [o.latitude, o.longitude];\r\n          o.markerSpriteAnchor = [0.5,0.5];\r\n          o.tooltip = '<div><p>'+o.scientific_name+'</p><p></p></div>';\r\n          if (o.native == \"TRUE\") {\r\n            o.iconId = \"icon_green\";\r\n            o.customIcon = '<svg xmlns=\"http://www.w3.org/2000/svg\" overflow=\"visible\" fill=\"green\" preserveAspectRatio=\"xMinYMin meet\" width=\"10\" height=\"10\" viewBox=\"0 0 10 10\"><circle r=\"50%\" cx=\"50%\" cy=\"50%\" /></svg>'\r\n          } else {\r\n            o.iconId = \"icon_gray\";\r\n            o.customIcon = '<svg xmlns=\"http://www.w3.org/2000/svg\" overflow=\"visible\" fill=\"gray\" fill-opacity=\"50%\" width=\"10\" height=\"10\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 10 10\"><circle r=\"50%\" cx=\"50%\" cy=\"50%\" /></svg>'\r\n          }\r\n          return o;\r\n        });\r\n\r\n        state.city = payload;\r\n    });\r\n    builder.addCase(getCity.rejected,(state, action) => {\r\n        state.loading = \"error\";\r\n    });\r\n    // free draw\r\n    builder.addCase(getFreeDraw.pending, (state) => {\r\n        state.freedraw = [];\r\n    });\r\n    builder.addCase(getFreeDraw.fulfilled, (state, { payload }) => {\r\n        console.log(payload);\r\n        state.freedraw = payload;\r\n    });\r\n    builder.addCase(getFreeDraw.rejected,(state, action) => {\r\n        state.loading = \"error\";\r\n    });\r\n  }\r\n});\r\n\r\nexport const { setEndpoint, setViewStatus, clearCity, clearFreeDraw, setScanStatus, setScanRadius, setScanCenter, setScanZoom } = markerSlice.actions;\r\n\r\nexport default markerSlice","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Map.js",["87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102"],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\SearchBar.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawBounds.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawSimilarityButtons.js",["103","104","105","106","107"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport { setDrawMode } from \"../features/mapSlice\";\r\nimport { useDispatch, useSelector, batch } from \"react-redux\";\r\nimport Fab from '@material-ui/core/Fab';\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport { setViewStatus } from \"../features/markerSlice\";\r\nimport { useLeaflet } from \"react-leaflet\";\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DrawAnalysisSimilarity from \"./DrawAnalysisSimilarity\";\r\nimport { getSimilarity, getSimilarityHistogram, setSimilarityCity1, setSimilarityCity2, setSimilarityState1, setSimilarityState2 } from \"../features/analysisSlice\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  chipMargin: {\r\n    margin: theme.spacing(1),\r\n    top: theme.spacing(7),\r\n    right: theme.spacing(1),\r\n    position: 'fixed',\r\n    zIndex: 1000,\r\n  }\r\n}));\r\n\r\n\r\nconst DrawSimilarityButtons = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const stateAnalysis = useSelector(state => state.analysis);\r\n    const { map } = useLeaflet();\r\n\r\n    function handleDelete(e) {\r\n        if (e === 1) {\r\n            batch(() => {\r\n                dispatch(setSimilarityCity1(\"\"));\r\n                dispatch(setSimilarityState1(\"\"));\r\n            });\r\n        } else if (e === 2) {\r\n            batch(() => {\r\n                dispatch(setSimilarityCity2(\"\"));\r\n                dispatch(setSimilarityState2(\"\"));\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleSimilarityClick() {\r\n        if (stateAnalysis.similarityCity1 !== \"\" && stateAnalysis.similarityCity2 !== \"\") {\r\n            let endpoint = '/api/get/citysimilarity?city1='+stateAnalysis.similarityCity1+'&city2='+stateAnalysis.similarityCity2+\r\n            '&state1='+stateAnalysis.similarityState1+'&state2='+stateAnalysis.similarityState2;\r\n            batch(() => {\r\n                dispatch(getSimilarity(endpoint));\r\n                dispatch(getSimilarityHistogram());\r\n            });\r\n        }\r\n    }\r\n\r\n    if (stateMarker.view_status === \"global\" && (stateAnalysis.similarityCity1 !== \"\" || stateAnalysis.similarityCity2 !== \"\")) {\r\n\r\n        if (stateAnalysis.similarityCity1 !== \"\" && stateAnalysis.similarityCity2 === \"\") {\r\n            return (\r\n                <Paper className={classes.chipMargin}>\r\n                    <DrawAnalysisSimilarity />\r\n                    <Chip\r\n                      size=\"small\"\r\n                      label={stateAnalysis.similarityCity1+\", \"+stateAnalysis.similarityState1}\r\n                      onDelete={() => handleDelete(1)}\r\n                    />\r\n                    <Button size=\"small\" variant=\"outlined\" onClick={handleSimilarityClick} color=\"primary\">calculate</Button>\r\n                </Paper>\r\n            );\r\n        } else if (stateAnalysis.similarityCity2 !== \"\" && stateAnalysis.similarityCity1 === \"\") {\r\n            return (\r\n                <Paper className={classes.chipMargin}>\r\n                    <DrawAnalysisSimilarity />\r\n                    <Chip\r\n                      size=\"small\"\r\n                      label={stateAnalysis.similarityCity2+\", \"+stateAnalysis.similarityState2}\r\n                      onDelete={() => handleDelete(2)}\r\n                    />\r\n                    <Button size=\"small\" variant=\"outlined\" onClick={handleSimilarityClick} color=\"primary\">calculate</Button>\r\n                </Paper>\r\n            );\r\n        } else {\r\n            return (\r\n                <Paper className={classes.chipMargin}>\r\n                    <DrawAnalysisSimilarity />\r\n                    <Chip\r\n                      size=\"small\"\r\n                      label={stateAnalysis.similarityCity1+\", \"+stateAnalysis.similarityState1}\r\n                      onDelete={() => handleDelete(1)}\r\n                    />\r\n                    <Chip\r\n                      size=\"small\"\r\n                      label={stateAnalysis.similarityCity2+\", \"+stateAnalysis.similarityState2}\r\n                      onDelete={() => handleDelete(2)}\r\n                    />\r\n                    <Button size=\"small\" variant=\"outlined\" onClick={handleSimilarityClick} color=\"primary\">calculate</Button>\r\n                </Paper>\r\n            );\r\n        }\r\n\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default DrawSimilarityButtons;","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\FreeDrawCustom.js",["108"],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawAnalysisNative.js",["109","110","111","112"],"import { useSelector } from \"react-redux\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  analysisMargin: {\r\n    margin: theme.spacing(1),\r\n    top: theme.spacing(7),\r\n    right: theme.spacing(1),\r\n    position: 'fixed',\r\n    zIndex: 1000,\r\n    width: 250,\r\n    padding: theme.spacing(1),\r\n  }\r\n}));\r\n\r\n// Custom map components\r\nconst DrawAnalysisNative = () => {\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const classes = useStyles();\r\n    let freedata;\r\n    let freetotal;\r\n    let countFreeNonNative;\r\n    let countFreeNative;\r\n    let freespeciescount = [];\r\n\r\n    let citydata;\r\n    let citytotal;\r\n    let countCityNonNative;\r\n    let countCityNative;\r\n    let cityspeciescount = [];\r\n\r\n    let citymarks;\r\n    let freemarks;\r\n\r\n    if ((stateMarker.freedraw.length > 0) || (stateMarker.view_status === \"city\" && stateMarker.city.length > 0)) {\r\n\r\n        //get native data\r\n        if (stateMarker.freedraw.length > 0) {\r\n            freedata = stateMarker.freedraw;\r\n            freetotal = freedata.length;\r\n            let tmpfreespeciescount = freedata.reduce((p,c) => {\r\n                var species = c.scientific_name;\r\n                if (!p.hasOwnProperty(species)) {\r\n                    p[species] = 0;\r\n                }\r\n                p[species]++;\r\n                return p;\r\n            }, {});\r\n\r\n            for (var species in tmpfreespeciescount) {\r\n                freespeciescount.push([species, tmpfreespeciescount[species]])\r\n            }\r\n\r\n            freespeciescount.sort(function(a,b) {\r\n                return b[1] - a[1];\r\n            });\r\n\r\n            freespeciescount = freespeciescount.slice(0,5);\r\n\r\n\r\n            countFreeNonNative = freedata.reduce((cnt, row) => {\r\n                if (row.native === \"FALSE\") {\r\n                    return cnt = cnt+1;\r\n                } else {\r\n                    return cnt;\r\n                }\r\n            }, 0);\r\n\r\n            countFreeNative = freedata.reduce((cnt, row) => {\r\n                if (row.native === \"TRUE\") {\r\n                    return cnt = cnt+1;\r\n                } else {\r\n                    return cnt;\r\n                }\r\n            }, 0);\r\n        }\r\n\r\n        if (stateMarker.city.length > 0) {\r\n            citydata = stateMarker.global.filter(function (el) {\r\n              return el.city === stateMarker.city[0].city && el.state === stateMarker.city[0].state\r\n            });\r\n\r\n            let tmpcityspeciescount = stateMarker.city.reduce((p,c) => {\r\n                var species = c.scientific_name;\r\n                if (!p.hasOwnProperty(species)) {\r\n                    p[species] = 0;\r\n                }\r\n                p[species]++;\r\n                return p;\r\n            }, {});\r\n\r\n            for (var species in tmpcityspeciescount) {\r\n                cityspeciescount.push([species, tmpcityspeciescount[species]])\r\n            }\r\n\r\n            cityspeciescount.sort(function(a,b) {\r\n                return b[1] - a[1];\r\n            });\r\n\r\n            cityspeciescount = cityspeciescount.slice(0,5);\r\n\r\n            citytotal = citydata[0].total_species;\r\n            countCityNonNative = citydata[0].count_non_native;\r\n            countCityNative = citydata[0].count_native;\r\n        }\r\n\r\n        citymarks = [\r\n          {value: countCityNative,label: 'Native'},\r\n          {value: citytotal,label: (citytotal/1000).toFixed()+\"K\"},\r\n        ];\r\n\r\n        freemarks = [\r\n          {value: countFreeNative,label: 'Native'},\r\n          {value: freetotal,label: freetotal},\r\n        ];\r\n\r\n    }\r\n\r\n    if (stateMarker.freedraw.length > 0 && stateMarker.city.length > 0) {\r\n         return(\r\n            <Paper className={classes.analysisMargin}>\r\n                <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                    <Grid item align=\"center\" xs={10} >\r\n                        <Typography gutterBottom>City Native Distribution</Typography>\r\n                        <Box pb={5} />\r\n                        <Slider\r\n                            defaultValue={countCityNative}\r\n                            valueLabelDisplay=\"on\"\r\n                            step={null}\r\n                            min={0}\r\n                            max={citytotal}\r\n                            marks={citymarks}\r\n                        />\r\n                        <ul>\r\n                            {cityspeciescount.map(function(name, index) {\r\n                                return <li key={index}>{name[0]}: {name[1]}</li>\r\n                            })}\r\n                        </ul>\r\n                    </Grid>\r\n                    <Grid item align=\"center\" xs={10} >\r\n                        <Typography gutterBottom>Freedraw Native Distribution</Typography>\r\n                        <Box pb={5} />\r\n                        <Slider\r\n                            defaultValue={countFreeNative}\r\n                            valueLabelDisplay=\"on\"\r\n                            step={null}\r\n                            min={0}\r\n                            max={freetotal}\r\n                            marks={freemarks}\r\n                        />\r\n                        <ul>\r\n                            {freespeciescount.map(function(name, index) {\r\n                                return <li key={index}>{name[0]}: {name[1]}</li>\r\n                            })}\r\n                        </ul>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n         )\r\n    } else if (stateMarker.freedraw.length == 0 && stateMarker.city.length > 0) {\r\n        return(\r\n            <Paper className={classes.analysisMargin}>\r\n                <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                    <Grid item align=\"center\" xs={10} >\r\n                        <Typography gutterBottom>City Native Distribution</Typography>\r\n                        <Box pb={5} />\r\n                        <Slider\r\n                            defaultValue={countCityNative}\r\n                            valueLabelDisplay=\"on\"\r\n                            step={null}\r\n                            min={0}\r\n                            max={citytotal}\r\n                            marks={citymarks}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default DrawAnalysisNative;","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\RescanMarkers.js",["113","114","115"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AdjustIcon from '@material-ui/icons/Adjust';\r\nimport { useDispatch, useSelector, batch } from \"react-redux\";\r\nimport { useLeaflet } from \"react-leaflet\";\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { setEndpoint, clearCity, setScanStatus, setScanRadius, setScanCenter, setScanZoom, setViewStatus } from \"../features/markerSlice\";\r\nimport { setDrawMode, setSearch } from \"../features/mapSlice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  scanMargin: {\r\n    margin: theme.spacing(1),\r\n    top: theme.spacing(34),\r\n    left: theme.spacing(1),\r\n    position: 'fixed',\r\n    zIndex: 1000,\r\n  }\r\n}));\r\n\r\n\r\nconst RescanMarkers = () => {\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const dispatch = useDispatch();\r\n    // classes\r\n    const classes = useStyles();\r\n    const { map } = useLeaflet();\r\n\r\n    function toRadian(degree) {\r\n        return degree*Math.PI/180;\r\n    }\r\n\r\n    function getDistance(origin, destination) {\r\n        // return distance in meters\r\n        var lon1 = toRadian(origin[1]),\r\n            lat1 = toRadian(origin[0]),\r\n            lon2 = toRadian(destination[1]),\r\n            lat2 = toRadian(destination[0]);\r\n\r\n        var deltaLat = lat2 - lat1;\r\n        var deltaLon = lon2 - lon1;\r\n\r\n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\r\n        var c = 2 * Math.asin(Math.sqrt(a));\r\n        var EARTH_RADIUS = 6371;\r\n        return c * EARTH_RADIUS * 1000;\r\n    }\r\n\r\n    function handleclick(e) {\r\n        if (stateMarker.view_status === \"city\" || stateMarker.view_status === \"global\") {\r\n            if (map.getZoom() < stateMarker.cityZoom) {\r\n                map.setZoom(stateMarker.cityZoom);\r\n            }\r\n            const zoom = map.getZoom();\r\n            const center = map.getCenter();\r\n            const lat = center.lat;\r\n            const lng = center.lng;\r\n            const bounds = map.getBounds();\r\n            const latNE = bounds['_northEast'].lat\r\n            const lngNE = bounds['_northEast'].lng\r\n            const radius = Math.round(0.5*getDistance([latNE, lngNE],[lat, lng]));\r\n\r\n            batch(() => {\r\n                dispatch(clearCity());\r\n                dispatch(setScanRadius(radius));\r\n                dispatch(setScanCenter({lat:lat, lng:lng}));\r\n                dispatch(setSearch(\"waiting\"));\r\n                if (zoom < stateMarker.cityZoom) {\r\n                    dispatch(setScanZoom(stateMarker.cityZoom));\r\n                } else {\r\n                    dispatch(setScanZoom(zoom));\r\n                }\r\n                dispatch(setViewStatus(\"city\"))\r\n                dispatch(setEndpoint({type:\"city\", lat:lat, lng:lng, radius:radius, limit:1000}));\r\n                dispatch(setScanStatus(\"scanning\"));\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Fab onClick={handleclick} size=\"small\" color=\"primary\" aria-label=\"add\" className={classes.scanMargin}>\r\n                <AdjustIcon />\r\n            </Fab>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RescanMarkers;","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\FreeDrawButtons.js",["116","117","118","119","120","121"],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DataViewButtons.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\GetMarkers.js",["122","123","124","125","126","127","128","129","130","131","132","133","134","135","136"],"import React, {useRef, useState} from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useDispatch, useSelector, batch } from \"react-redux\";\r\nimport { Circle } from \"react-leaflet\";\r\nimport { Marker, Popup } from \"react-leaflet\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport { renderToString } from 'react-dom/server';\r\nimport PixiOverlay from 'react-leaflet-pixi-overlay';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { setSimilarityCity1, setSimilarityCity2, setSimilarityState1, setSimilarityState2 } from \"../features/analysisSlice\";\r\n\r\nimport { useLeaflet } from \"react-leaflet\";\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AdjustIcon from '@material-ui/icons/Adjust';\r\nimport { setEndpoint, getCity, clearCity, setScanStatus, setScanRadius, setScanCenter, setScanZoom, setViewStatus } from \"../features/markerSlice\";\r\nimport { setDrawMode, setSearch } from \"../features/mapSlice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  scanMargin: {\r\n    margin: theme.spacing(1),\r\n    top: theme.spacing(34),\r\n    left: theme.spacing(1),\r\n    position: 'fixed',\r\n    zIndex: 1000,\r\n  }\r\n}));\r\n\r\nconst GetMarkers = () => {\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const stateAnalysis = useSelector(state => state.analysis);\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const { map } = useLeaflet();\r\n\r\n    const [endpoint, setEndpoint] = useState();\r\n    const [scan_lat, setScanLat] = useState();\r\n    const [scan_lng, setScanLng] = useState();\r\n    const [scan_radius, setScanRadius] = useState();\r\n\r\n    function handleSimilarityClick(city, state) {\r\n        if (stateAnalysis.similarityCity1 === \"\") {\r\n            batch(() => {\r\n                dispatch(setSimilarityCity1(city));\r\n                dispatch(setSimilarityState1(state));\r\n            });\r\n        } else if (stateAnalysis.similarityCity2 === \"\") {\r\n            batch(() => {\r\n                dispatch(setSimilarityCity2(city));\r\n                dispatch(setSimilarityState2(state));\r\n            });\r\n        }\r\n    }\r\n\r\n        function toRadian(degree) {\r\n        return degree*Math.PI/180;\r\n    }\r\n\r\n    function getDistance(origin, destination) {\r\n        // return distance in meters\r\n        var lon1 = toRadian(origin[1]),\r\n            lat1 = toRadian(origin[0]),\r\n            lon2 = toRadian(destination[1]),\r\n            lat2 = toRadian(destination[0]);\r\n\r\n        var deltaLat = lat2 - lat1;\r\n        var deltaLon = lon2 - lon1;\r\n\r\n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\r\n        var c = 2 * Math.asin(Math.sqrt(a));\r\n        var EARTH_RADIUS = 6371;\r\n        return c * EARTH_RADIUS * 1000;\r\n    }\r\n\r\n    function handleclick(e) {\r\n        if (stateMarker.view_status === \"city\" || stateMarker.view_status === \"global\") {\r\n            if (map.getZoom() < stateMarker.cityZoom) {\r\n                map.setZoom(stateMarker.cityZoom);\r\n            }\r\n            const zoom = map.getZoom();\r\n            const center = map.getCenter();\r\n            const lat = center.lat;\r\n            const lng = center.lng;\r\n            const bounds = map.getBounds();\r\n            const latNE = bounds['_northEast'].lat\r\n            const lngNE = bounds['_northEast'].lng\r\n            const radius = Math.round(0.5*getDistance([latNE, lngNE],[lat, lng]));\r\n            setScanLat(lat);\r\n            setScanLng(lng);\r\n            setScanRadius(radius);\r\n\r\n            dispatch(getCity(\"/api/get/city?lat=\"+lat+\"&lng=\"+lng+\"&radius=\"+radius));\r\n        }\r\n\r\n    }\r\n\r\n    if (stateMarker.view_status === \"global\"){\r\n        console.log(\"Draw global\");\r\n\r\n        return stateMarker.global.map((el, i) => (\r\n          <Marker\r\n            key={i}\r\n            position={[el.latitude, el.longitude]}\r\n          >\r\n            <Popup>\r\n                <p>{el.city}, {el.state}</p>\r\n                <p>Number of Trees: {el.total_species}</p>\r\n                <p>Number of Species: {el.total_unique_species}</p>\r\n                <Box pb={4} />\r\n                <Slider\r\n                    defaultValue={el.count_native}\r\n                    step={null}\r\n                    min={0}\r\n                    max={el.total_species}\r\n                    valueLabelDisplay=\"on\"\r\n                    marks={\r\n                        [\r\n                          {value: el.count_native,label: 'Native'},\r\n                          {value: el.total_species, label: (el.total_species/1000).toFixed()+\"K\"}\r\n                        ]\r\n                    }\r\n                />\r\n                <Button onClick={() => handleSimilarityClick(el.city, el.state)} value={el.city} variant=\"outlined\" size=\"small\" color=\"primary\">\r\n                  Compare\r\n                </Button>\r\n            </Popup>\r\n          </Marker>\r\n        ));\r\n    } else if (stateMarker.view_status === \"city\" && stateMarker.city.length == 0 )  {\r\n        console.log(\"Draw PixiOverlay\");\r\n        return (\r\n            <Fab onClick={handleclick} size=\"small\" color=\"primary\" aria-label=\"add\" className={classes.scanMargin}>\r\n                <AdjustIcon />\r\n            </Fab>\r\n        )\r\n    } else if (stateMarker.view_status === \"city\" && stateMarker.city.length > 0) {\r\n        return (\r\n            <div>\r\n                <PixiOverlay markers={stateMarker.city} />\r\n                <Circle\r\n                    weight={1}\r\n                    opacity={0.5}\r\n                    fill={false}\r\n                    center={[scan_lat, scan_lng]}\r\n                    radius={1.5*scan_radius} />\r\n                <Fab onClick={handleclick} size=\"small\" color=\"primary\" aria-label=\"add\" className={classes.scanMargin}>\r\n                    <AdjustIcon />\r\n                </Fab>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n};\r\n\r\nexport default GetMarkers;","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawAnalysisSimilarity.js",["137","138","139","140","141","142","143","144","145"],"import { useSelector } from \"react-redux\";\r\nimport { Circle } from \"react-leaflet\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { VictoryBar, VictoryChart, VictoryLine, VictoryHistogram, VictoryLabel, VictoryAxis, VictoryTheme } from 'victory';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport { setSimilarityCity1, setSimilarityCity2, getSimilarity } from \"../features/analysisSlice\";\r\n\r\n\r\n// Custom map components\r\nconst DrawAnalysisSimilarity = () => {\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const stateAnalysis = useSelector(state => state.analysis);\r\n\r\n    if (stateMarker.view_status === \"global\" && stateAnalysis.similarityData['ds_similarity'] !== \"\") {\r\n        let ds_label = stateAnalysis.similarityData['city1']+\", \"+stateAnalysis.similarityData['state1']+\" vs. \"+stateAnalysis.similarityData['city2']+\", \"+stateAnalysis.similarityData['state2'];\r\n        return(\r\n            <Box>\r\n                <VictoryChart\r\n                  domainPadding={{ x: 20 }}\r\n                  padding={{ top: 50, bottom: 50, left: 50, right: 20 }}\r\n                >\r\n                    <VictoryLabel x={150} y={290} text={\"Dice Sorensen Similarity\"} />\r\n                    <VictoryLabel x={25} y={20} text={ds_label} />\r\n                    <VictoryHistogram\r\n                        style={{\r\n                          data: { fill: \"#c43a31\" }\r\n                        }}\r\n                        data={stateAnalysis.similarityHistogramData}\r\n                        bins={100}\r\n                    />\r\n                    <VictoryLine\r\n                      x={() => stateAnalysis.similarityData['ds_similarity']}\r\n                      samples={1}\r\n                      labels={[stateAnalysis.similarityData['ds_similarity']]}\r\n                      labelComponent={<VictoryLabel renderInPortal dx={25} dy={-100}/>}\r\n                    />\r\n                </VictoryChart>\r\n            </Box>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default DrawAnalysisSimilarity;",{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":5,"column":10,"nodeType":"152","messageId":"153","endLine":5,"endColumn":20},{"ruleId":"150","severity":1,"message":"154","line":6,"column":8,"nodeType":"152","messageId":"153","endLine":6,"endColumn":13},{"ruleId":"155","severity":1,"message":"156","line":95,"column":24,"nodeType":"157","messageId":"158","endLine":95,"endColumn":26},{"ruleId":"150","severity":1,"message":"159","line":2,"column":8,"nodeType":"152","messageId":"153","endLine":2,"endColumn":21},{"ruleId":"150","severity":1,"message":"160","line":3,"column":8,"nodeType":"152","messageId":"153","endLine":3,"endColumn":18},{"ruleId":"150","severity":1,"message":"161","line":5,"column":8,"nodeType":"152","messageId":"153","endLine":5,"endColumn":23},{"ruleId":"150","severity":1,"message":"162","line":12,"column":36,"nodeType":"152","messageId":"153","endLine":12,"endColumn":41},{"ruleId":"150","severity":1,"message":"163","line":13,"column":21,"nodeType":"152","messageId":"153","endLine":13,"endColumn":28},{"ruleId":"150","severity":1,"message":"164","line":13,"column":30,"nodeType":"152","messageId":"153","endLine":13,"endColumn":41},{"ruleId":"150","severity":1,"message":"165","line":13,"column":43,"nodeType":"152","messageId":"153","endLine":13,"endColumn":54},{"ruleId":"150","severity":1,"message":"166","line":13,"column":56,"nodeType":"152","messageId":"153","endLine":13,"endColumn":69},{"ruleId":"150","severity":1,"message":"167","line":13,"column":71,"nodeType":"152","messageId":"153","endLine":13,"endColumn":80},{"ruleId":"150","severity":1,"message":"168","line":13,"column":82,"nodeType":"152","messageId":"153","endLine":13,"endColumn":95},{"ruleId":"150","severity":1,"message":"169","line":13,"column":97,"nodeType":"152","messageId":"153","endLine":13,"endColumn":110},{"ruleId":"150","severity":1,"message":"170","line":13,"column":112,"nodeType":"152","messageId":"153","endLine":13,"endColumn":125},{"ruleId":"150","severity":1,"message":"171","line":13,"column":127,"nodeType":"152","messageId":"153","endLine":13,"endColumn":138},{"ruleId":"150","severity":1,"message":"172","line":14,"column":10,"nodeType":"152","messageId":"153","endLine":14,"endColumn":19},{"ruleId":"150","severity":1,"message":"173","line":23,"column":11,"nodeType":"152","messageId":"153","endLine":23,"endColumn":19},{"ruleId":"174","severity":1,"message":"175","line":28,"column":8,"nodeType":"176","endLine":28,"endColumn":18,"suggestions":"177"},{"ruleId":"150","severity":1,"message":"178","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":21},{"ruleId":"150","severity":1,"message":"179","line":4,"column":8,"nodeType":"152","messageId":"153","endLine":4,"endColumn":11},{"ruleId":"150","severity":1,"message":"180","line":5,"column":8,"nodeType":"152","messageId":"153","endLine":5,"endColumn":23},{"ruleId":"150","severity":1,"message":"166","line":6,"column":10,"nodeType":"152","messageId":"153","endLine":6,"endColumn":23},{"ruleId":"150","severity":1,"message":"181","line":30,"column":13,"nodeType":"152","messageId":"153","endLine":30,"endColumn":16},{"ruleId":"150","severity":1,"message":"168","line":5,"column":25,"nodeType":"152","messageId":"153","endLine":5,"endColumn":38},{"ruleId":"150","severity":1,"message":"182","line":66,"column":13,"nodeType":"152","messageId":"153","endLine":66,"endColumn":31},{"ruleId":"183","severity":1,"message":"184","line":97,"column":22,"nodeType":"152","messageId":"185","endLine":97,"endColumn":29},{"ruleId":"150","severity":1,"message":"186","line":108,"column":13,"nodeType":"152","messageId":"153","endLine":108,"endColumn":31},{"ruleId":"155","severity":1,"message":"156","line":165,"column":44,"nodeType":"157","messageId":"158","endLine":165,"endColumn":46},{"ruleId":"150","severity":1,"message":"187","line":6,"column":10,"nodeType":"152","messageId":"153","endLine":6,"endColumn":24},{"ruleId":"150","severity":1,"message":"188","line":7,"column":10,"nodeType":"152","messageId":"153","endLine":7,"endColumn":23},{"ruleId":"150","severity":1,"message":"178","line":9,"column":10,"nodeType":"152","messageId":"153","endLine":9,"endColumn":21},{"ruleId":"150","severity":1,"message":"165","line":10,"column":10,"nodeType":"152","messageId":"153","endLine":10,"endColumn":21},{"ruleId":"150","severity":1,"message":"167","line":10,"column":23,"nodeType":"152","messageId":"153","endLine":10,"endColumn":32},{"ruleId":"150","severity":1,"message":"169","line":10,"column":49,"nodeType":"152","messageId":"153","endLine":10,"endColumn":62},{"ruleId":"150","severity":1,"message":"170","line":10,"column":64,"nodeType":"152","messageId":"153","endLine":10,"endColumn":77},{"ruleId":"150","severity":1,"message":"171","line":10,"column":79,"nodeType":"152","messageId":"153","endLine":10,"endColumn":90},{"ruleId":"150","severity":1,"message":"166","line":10,"column":92,"nodeType":"152","messageId":"153","endLine":10,"endColumn":105},{"ruleId":"150","severity":1,"message":"189","line":1,"column":16,"nodeType":"152","messageId":"153","endLine":1,"endColumn":22},{"ruleId":"150","severity":1,"message":"190","line":8,"column":10,"nodeType":"152","messageId":"153","endLine":8,"endColumn":24},{"ruleId":"150","severity":1,"message":"165","line":16,"column":10,"nodeType":"152","messageId":"153","endLine":16,"endColumn":21},{"ruleId":"150","severity":1,"message":"167","line":16,"column":32,"nodeType":"152","messageId":"153","endLine":16,"endColumn":41},{"ruleId":"150","severity":1,"message":"168","line":16,"column":43,"nodeType":"152","messageId":"153","endLine":16,"endColumn":56},{"ruleId":"150","severity":1,"message":"169","line":16,"column":58,"nodeType":"152","messageId":"153","endLine":16,"endColumn":71},{"ruleId":"150","severity":1,"message":"170","line":16,"column":73,"nodeType":"152","messageId":"153","endLine":16,"endColumn":86},{"ruleId":"150","severity":1,"message":"171","line":16,"column":88,"nodeType":"152","messageId":"153","endLine":16,"endColumn":99},{"ruleId":"150","severity":1,"message":"166","line":16,"column":101,"nodeType":"152","messageId":"153","endLine":16,"endColumn":114},{"ruleId":"150","severity":1,"message":"178","line":17,"column":10,"nodeType":"152","messageId":"153","endLine":17,"endColumn":21},{"ruleId":"150","severity":1,"message":"172","line":17,"column":23,"nodeType":"152","messageId":"153","endLine":17,"endColumn":32},{"ruleId":"150","severity":1,"message":"191","line":36,"column":12,"nodeType":"152","messageId":"153","endLine":36,"endColumn":20},{"ruleId":"150","severity":1,"message":"192","line":36,"column":22,"nodeType":"152","messageId":"153","endLine":36,"endColumn":33},{"ruleId":"150","severity":1,"message":"193","line":80,"column":19,"nodeType":"152","messageId":"153","endLine":80,"endColumn":23},{"ruleId":"155","severity":1,"message":"156","line":129,"column":78,"nodeType":"157","messageId":"158","endLine":129,"endColumn":80},{"ruleId":"150","severity":1,"message":"194","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":16},{"ruleId":"150","severity":1,"message":"195","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":20},{"ruleId":"150","severity":1,"message":"151","line":4,"column":10,"nodeType":"152","messageId":"153","endLine":4,"endColumn":20},{"ruleId":"150","severity":1,"message":"196","line":4,"column":81,"nodeType":"152","messageId":"153","endLine":4,"endColumn":92},{"ruleId":"150","severity":1,"message":"197","line":4,"column":94,"nodeType":"152","messageId":"153","endLine":4,"endColumn":106},{"ruleId":"150","severity":1,"message":"154","line":5,"column":8,"nodeType":"152","messageId":"153","endLine":5,"endColumn":13},{"ruleId":"150","severity":1,"message":"198","line":7,"column":10,"nodeType":"152","messageId":"153","endLine":7,"endColumn":28},{"ruleId":"150","severity":1,"message":"199","line":7,"column":30,"nodeType":"152","messageId":"153","endLine":7,"endColumn":48},{"ruleId":"150","severity":1,"message":"200","line":7,"column":50,"nodeType":"152","messageId":"153","endLine":7,"endColumn":63},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],"no-unused-vars","'VictoryBar' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'RescanMarkers' is defined but never used.","'DrawBounds' is defined but never used.","'FreeDrawButtons' is defined but never used.","'batch' is defined but never used.","'getCity' is defined but never used.","'getFreeDraw' is defined but never used.","'setEndpoint' is defined but never used.","'setViewStatus' is defined but never used.","'clearCity' is defined but never used.","'setScanStatus' is defined but never used.","'setScanRadius' is defined but never used.","'setScanCenter' is defined but never used.","'setScanZoom' is defined but never used.","'setSearch' is defined but never used.","'cityZoom' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'stateMarker.endpoint'. Either include it or remove the dependency array.","ArrayExpression",["203"],"'setDrawMode' is defined but never used.","'Fab' is defined but never used.","'BorderColorIcon' is defined but never used.","'map' is assigned a value but never used.","'countFreeNonNative' is assigned a value but never used.","no-redeclare","'species' is already defined.","redeclared","'countCityNonNative' is assigned a value but never used.","'createMuiTheme' is defined but never used.","'ThemeProvider' is defined but never used.","'useRef' is defined but never used.","'renderToString' is defined but never used.","'endpoint' is assigned a value but never used.","'setEndpoint' is assigned a value but never used.","'zoom' is assigned a value but never used.","'Circle' is defined but never used.","'makeStyles' is defined but never used.","'VictoryAxis' is defined but never used.","'VictoryTheme' is defined but never used.","'setSimilarityCity1' is defined but never used.","'setSimilarityCity2' is defined but never used.","'getSimilarity' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"204","fix":"205"},"Update the dependencies array to be: [dispatch, stateMarker.endpoint]",{"range":"206","text":"207"},[1150,1160],"[dispatch, stateMarker.endpoint]"]