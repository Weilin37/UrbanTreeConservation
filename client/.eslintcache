[{"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\index.js":"1","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\store\\index.js":"2","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\App.js":"3","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\analysisSlice.js":"4","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\mapSlice.js":"5","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\NavBar.js":"6","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Map.js":"7","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\markerSlice.js":"8","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Loading.js":"9","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\SearchBar.js":"10","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawSimilarityButtons.js":"11","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawAnalysisNative.js":"12","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\GetMarkers.js":"13","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\FreeDrawCustom.js":"14","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Filters.js":"15","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DataViewButtons.js":"16","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawAnalysisSimilarity.js":"17","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Upload.js":"18","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\uploadSlice.js":"19"},{"size":290,"mtime":1610726607207,"results":"20","hashOfConfig":"21"},{"size":721,"mtime":1616438887226,"results":"22","hashOfConfig":"21"},{"size":1963,"mtime":1640975596496,"results":"23","hashOfConfig":"21"},{"size":2209,"mtime":1617913059716,"results":"24","hashOfConfig":"21"},{"size":1947,"mtime":1610726607221,"results":"25","hashOfConfig":"21"},{"size":720,"mtime":1619758109767,"results":"26","hashOfConfig":"21"},{"size":1888,"mtime":1619758109766,"results":"27","hashOfConfig":"21"},{"size":5341,"mtime":1638590402918,"results":"28","hashOfConfig":"21"},{"size":657,"mtime":1616629211749,"results":"29","hashOfConfig":"21"},{"size":2326,"mtime":1616423222438,"results":"30","hashOfConfig":"21"},{"size":3836,"mtime":1617916067318,"results":"31","hashOfConfig":"21"},{"size":6366,"mtime":1617933780071,"results":"32","hashOfConfig":"21"},{"size":9715,"mtime":1638589933099,"results":"33","hashOfConfig":"21"},{"size":7711,"mtime":1619758109761,"results":"34","hashOfConfig":"21"},{"size":2601,"mtime":1638590284620,"results":"35","hashOfConfig":"21"},{"size":2873,"mtime":1619758109757,"results":"36","hashOfConfig":"21"},{"size":1737,"mtime":1617913115714,"results":"37","hashOfConfig":"21"},{"size":8313,"mtime":1640977366012,"results":"38","hashOfConfig":"21"},{"size":1041,"mtime":1640029922662,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"9yxsz4",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\index.js",[],["84","85"],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\store\\index.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\App.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\analysisSlice.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\mapSlice.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\NavBar.js",["86","87"],"import AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchBar from \"./SearchBar\";\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst NavBar = props => {\r\n    return (\r\n      <AppBar position=\"static\">\r\n          <Toolbar variant=\"dense\">\r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n              Urban Tree Conservation\r\n            </Typography>\r\n            <Box display=\"flex\" justify=\"flex-end\"><SearchBar /></Box>\r\n          </Toolbar>\r\n      </AppBar>\r\n    );\r\n}\r\n\r\nexport default NavBar;","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Map.js",["88"],"import React, { useEffect } from \"react\";\r\nimport FreeDrawCustom from \"./FreeDrawCustom\";\r\nimport DrawAnalysisNative from \"./DrawAnalysisNative\";\r\nimport DrawSimilarityButtons from \"./DrawSimilarityButtons\";\r\nimport GetMarkers from \"./GetMarkers\";\r\nimport Loading from \"./Loading\";\r\nimport DataViewButtons from \"./DataViewButtons\";\r\nimport { Map, TileLayer } from \"react-leaflet\";\r\nimport \"../../css/app.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getGlobal } from \"../features/markerSlice\";\r\n\r\nimport Filters from \"./Filters\";\r\n\r\nexport const LeafMap = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    // state\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const stateMap = useSelector(state => state.map);\r\n\r\n    // Effects\r\n    useEffect(() => {\r\n        dispatch(getGlobal(stateMarker.endpoint));\r\n    }, [dispatch]);\r\n\r\n    // render component\r\n    if (stateMarker.global.length > 0) {\r\n        return (\r\n            <Map doubleClickZoom={false} preferCanvas={false} center={[stateMap.lat, stateMap.lng]}\r\n            zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n              <Loading />\r\n              <GetMarkers />\r\n              <FreeDrawCustom />\r\n              <DataViewButtons />\r\n              <DrawAnalysisNative />\r\n              <Filters />\r\n              <DrawSimilarityButtons />\r\n            </Map>\r\n        );\r\n    } else {\r\n        return (\r\n            <Map center={[stateMap.lat, stateMap.lng]} zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n            </Map>\r\n        );\r\n    }\r\n\r\n}","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\markerSlice.js",["89"],"import { createSlice,createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\n\r\n// CREATE Thunk\r\nexport const getGlobal = createAsyncThunk(\"markers/getGlobal\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\nexport const getCity = createAsyncThunk(\"markers/getCity\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\nexport const getFreeDraw = createAsyncThunk(\"markers/getFreeDraw\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\n// CREATE SLICE\r\nconst markerSlice = createSlice({\r\n  name: \"markers\",\r\n  initialState: {\r\n    global: [],\r\n    city: [],\r\n    freedraw: [],\r\n    globalfilter: 'Native Trees',\r\n    cityfilter: 'Native Trees',\r\n    endpoint: \"/api/get/global\",\r\n    scan_status: \"waiting\",\r\n    scan_radius: 0,\r\n    scan_lat: 37.8,\r\n    scan_lng: -96,\r\n    scan_zoom: 3,\r\n    cityZoom: 10,\r\n    treeZoom: 16,\r\n    view_status: \"global\",\r\n    previous_view_status: \"global\",\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    setEndpoint: (state, action) => {\r\n        if (action.payload.type === \"global\") {\r\n            state.endpoint = \"/api/get/global\"\r\n        } else if (action.payload.type === \"city\") {\r\n            state.endpoint = \"/api/get/city?lat=\"+action.payload.lat+\"&lng=\"+action.payload.lng+\"&radius=\"+action.payload.radius+\"&limit=\"+action.payload.limit\r\n        } else if (action.payload.type === \"freedraw\") {\r\n            state.endpoint = \"/api/get/freedraw?lat=\"+action.payload.lat+\"&lng=\"+action.payload.lng+\"&radius=\"+action.payload.radius+\"&polygons=\"+action.payload.polygons;\r\n        }\r\n    },\r\n    clearCity: (state) => {state.city = [];},\r\n    setLoading: (state, action) => {state.loading = action.payload;},\r\n    clearFreeDraw: (state) => {state.freedraw = [];},\r\n    setScanStatus: (state, action) => {state.scan_status = action.payload;},\r\n    setViewStatus: (state, action) => {\r\n        state.previous_view_status = state.view_status;\r\n        state.view_status = action.payload;\r\n    },\r\n    setScanRadius: (state, action) => {state.scan_radius = action.payload;},\r\n    setScanZoom: (state, action) => {state.scan_zoom = action.payload;},\r\n    setScanCenter: (state, action) => {\r\n        state.scan_lat = action.payload.lat;\r\n        state.scan_lng = action.payload.lng;\r\n    },\r\n    setScanLng: (state, action) => {state.scan_lng = action.payload;},\r\n    setGlobalFilter: (state, action) => {state.globalfilter = action.payload;},\r\n    setCityFilter: (state, action) => {state.cityfilter = action.payload;},\r\n  },\r\n  extraReducers: (builder) => {\r\n    // global\r\n    builder.addCase(getGlobal.pending, (state) => {\r\n        state.global = [];\r\n    });\r\n    builder.addCase(getGlobal.fulfilled, (state, { payload }) => {\r\n        state.global = payload;\r\n    });\r\n    builder.addCase(getGlobal.rejected,(state, action) => {\r\n        state.loading = false;\r\n    });\r\n    // city\r\n    builder.addCase(getCity.pending, (state) => {\r\n        state.loading = true;\r\n        state.city = [];\r\n    });\r\n    builder.addCase(getCity.fulfilled, (state, { payload }) => {\r\n        payload = payload.map(function(o) {\r\n          o.position = [o.latitude, o.longitude];\r\n          o.markerSpriteAnchor = [0.5,0.5];\r\n          if (state.cityfilter == \"Native Trees\") {\r\n              if (o.native === \"TRUE\") {\r\n                o.iconId = \"icon_green\";\r\n                o.customIcon = '<svg xmlns=\"http://www.w3.org/2000/svg\" overflow=\"visible\" fill=\"#d95f0e\" preserveAspectRatio=\"xMinYMin meet\" width=\"10\" height=\"10\" viewBox=\"0 0 10 10\"><circle r=\"50%\" cx=\"50%\" cy=\"50%\" /></svg>'\r\n              } else {\r\n                o.iconId = \"icon_gray\";\r\n                o.customIcon = '<svg xmlns=\"http://www.w3.org/2000/svg\" overflow=\"visible\" fill=\"gray\" fill-opacity=\"50%\" width=\"10\" height=\"10\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 10 10\"><circle r=\"50%\" cx=\"50%\" cy=\"50%\" /></svg>'\r\n              }\r\n\r\n          }\r\n          return o;\r\n        });\r\n        state.city = payload;\r\n        state.loading = false;\r\n    });\r\n    builder.addCase(getCity.rejected,(state, action) => {\r\n        state.loading = false;\r\n    });\r\n    // free draw\r\n    builder.addCase(getFreeDraw.pending, (state) => {\r\n        state.loading = true;\r\n    });\r\n    builder.addCase(getFreeDraw.fulfilled, (state, { payload }) => {\r\n        state.freedraw = payload;\r\n        state.loading = false;\r\n    });\r\n    builder.addCase(getFreeDraw.rejected,(state, action) => {\r\n        state.loading = false;\r\n    });\r\n  }\r\n});\r\n\r\nexport const {\r\n        setEndpoint,\r\n        setViewStatus,\r\n        clearCity,\r\n        clearFreeDraw,\r\n        setScanStatus,\r\n        setScanRadius,\r\n        setScanCenter,\r\n        setScanZoom,\r\n        setLoading,\r\n        setGlobalFilter,\r\n        setCityFilter,\r\n    } = markerSlice.actions;\r\n\r\nexport default markerSlice","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Loading.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\SearchBar.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawSimilarityButtons.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawAnalysisNative.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\GetMarkers.js",["90","91"],"import React, { useState} from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useDispatch, useSelector, batch } from \"react-redux\";\r\nimport { CircleMarker } from \"react-leaflet\";\r\nimport { Marker, Popup } from \"react-leaflet\";\r\nimport Button from '@material-ui/core/Button';\r\nimport PixiOverlay from 'react-leaflet-pixi-overlay';\r\nimport { setSimilarityGreaterMetro1, setSimilarityGreaterMetro2 } from \"../features/analysisSlice\";\r\n\r\nimport { useLeaflet } from \"react-leaflet\";\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { getCity } from \"../features/markerSlice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  scanMargin: {\r\n    margin: theme.spacing(1),\r\n    top: theme.spacing(7),\r\n    left: theme.spacing(7),\r\n    position: 'fixed',\r\n    zIndex: 1000,\r\n  },\r\n  backdrop: {\r\n    zIndex:1000\r\n  }\r\n}));\r\n\r\nconst GetMarkers = () => {\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const stateAnalysis = useSelector(state => state.analysis);\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const { map } = useLeaflet();\r\n\r\n\r\n    var percentColors = [\r\n        { pct: 0.0, color: { r: 128, g: 128, b: 128 } },\r\n        { pct: 1.0, color: { r: 0, g: 200, b: 0 } }\r\n    ];\r\n\r\n    if (stateMarker.globalfilter === 'Native Trees') {\r\n        percentColors = [\r\n            { pct: 0.0, color: { r: 255, g: 247, b: 188 } },\r\n            { pct: 1.0, color: { r: 217, g: 95 , b: 14 } }\r\n        ];\r\n    } else if (stateMarker.globalfilter === 'Unique Species') {\r\n        percentColors = [\r\n            { pct: 0.0, color: { r: 224, g: 236, b: 244 } },\r\n            { pct: 1.0, color: { r: 136, g: 86 , b: 167 } }\r\n        ];\r\n    } else if (stateMarker.globalfilter === 'Number Trees') {\r\n        percentColors = [\r\n            { pct: 0.0, color: { r: 205, g: 247, b: 220 } },\r\n            { pct: 1.0, color: { r: 3, g: 148 , b: 55 } }\r\n        ];\r\n    }\r\n\r\n    var max_num_trees;\r\n    var min_num_trees;\r\n    var max_unique_species;\r\n\r\n    for (var row of stateMarker.global) {\r\n        var num_trees = parseInt(row.total_species)\r\n        var num_unique = parseInt(row.total_unique_species)\r\n        if (!max_num_trees || num_trees > max_num_trees) {max_num_trees = num_trees}\r\n        if (!min_num_trees || num_trees < min_num_trees) {min_num_trees = num_trees}\r\n        if (!max_unique_species || num_unique > max_unique_species) {max_unique_species = num_unique}\r\n    }\r\n\r\n    var getColorForPercentage = function(pct) {\r\n        for (var i = 1; i < percentColors.length - 1; i++) {\r\n            if (pct < percentColors[i].pct) {\r\n                break;\r\n            }\r\n        }\r\n        var lower = percentColors[i - 1];\r\n        var upper = percentColors[i];\r\n        var range = upper.pct - lower.pct;\r\n        var rangePct = (pct - lower.pct) / range;\r\n        var pctLower = 1 - rangePct;\r\n        var pctUpper = rangePct;\r\n        var color = {\r\n            r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),\r\n            g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),\r\n            b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper)\r\n        };\r\n        return 'rgb(' + [color.r, color.g, color.b].join(',') + ')';\r\n    }\r\n\r\n    function handleSimilarityClick(greater_metro) {\r\n        if (stateAnalysis.similarityGreaterMetro1 === \"\") {\r\n            dispatch(setSimilarityGreaterMetro1(greater_metro));\r\n        } else if (stateAnalysis.similarityGreaterMetro2 === \"\") {\r\n            dispatch(setSimilarityGreaterMetro2(greater_metro));\r\n        }\r\n        return\r\n    }\r\n\r\n    function toRadian(degree) {\r\n        return degree*Math.PI/180;\r\n    }\r\n\r\n    function getDistance(origin, destination) {\r\n        // return distance in meters\r\n        var lon1 = toRadian(origin[1]),\r\n            lat1 = toRadian(origin[0]),\r\n            lon2 = toRadian(destination[1]),\r\n            lat2 = toRadian(destination[0]);\r\n\r\n        var deltaLat = lat2 - lat1;\r\n        var deltaLon = lon2 - lon1;\r\n\r\n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\r\n        var c = 2 * Math.asin(Math.sqrt(a));\r\n        var EARTH_RADIUS = 6371;\r\n        return c * EARTH_RADIUS * 1000;\r\n    }\r\n\r\n    function handleclick(e) {\r\n        if (stateMarker.view_status === \"city\" || stateMarker.view_status === \"global\") {\r\n            if (map.getZoom() < stateMarker.cityZoom) {\r\n                map.setZoom(stateMarker.cityZoom);\r\n            }\r\n            const center = map.getCenter();\r\n            const lat = center.lat;\r\n            const lng = center.lng;\r\n            const bounds = map.getBounds();\r\n            const latNE = bounds['_northEast'].lat\r\n            const lngNE = bounds['_northEast'].lng\r\n            const radius = Math.round(0.5*getDistance([latNE, lngNE],[lat, lng]));\r\n\r\n            batch(() => {\r\n                dispatch(getCity(\"/api/get/city?lat=\"+lat+\"&lng=\"+lng+\"&radius=\"+radius));\r\n                //dispatch(setLoading(true));\r\n            });\r\n        }\r\n    }\r\n\r\n    if (stateMarker.view_status === \"global\"){\r\n\r\n        if (stateMarker.globalfilter === 'Native Trees') {\r\n            return stateMarker.global.map((el, i) => (\r\n              <CircleMarker\r\n                key={i}\r\n                center={[el.latitude, el.longitude]}\r\n                radius={Math.log(parseInt(el.total_species))}\r\n                fillColor={getColorForPercentage(parseInt(el.count_native)/parseInt(el.total_species))}\r\n                fillOpacity={1}\r\n                stroke={true}\r\n                color={'black'}\r\n                weight={1}\r\n              >\r\n                <Popup>\r\n                    <p>{el.greater_metro}</p>\r\n                    <p>Number of Trees: {el.total_species}</p>\r\n                    <p>Number of Native Trees: {el.count_native}</p>\r\n                    <p>Number of Species: {el.total_unique_species}</p>\r\n                    <p>Percent Native: {(100*parseInt(el.count_native)/parseInt(el.total_species)).toFixed(1)+\"%\"}</p>\r\n                    <Button onClick={() => handleSimilarityClick(el.greater_metro)} value={el.greater_metro} variant=\"outlined\" size=\"small\" color=\"primary\">\r\n                      Compare\r\n                    </Button>\r\n                </Popup>\r\n              </CircleMarker>\r\n            ));\r\n        } else if (stateMarker.globalfilter === 'Unique Species') {\r\n            return stateMarker.global.map((el, i) => (\r\n              <CircleMarker\r\n                key={i}\r\n                center={[el.latitude, el.longitude]}\r\n                radius={Math.log(parseInt(el.total_species))}\r\n                fillColor={getColorForPercentage(parseInt(el.total_unique_species)/parseInt(max_unique_species))}\r\n                fillOpacity={1}\r\n                stroke={true}\r\n                color={'black'}\r\n                weight={1}\r\n              >\r\n                <Popup>\r\n                    <p>{el.greater_metro}</p>\r\n                    <p>Number of Trees: {el.total_species}</p>\r\n                    <p>Number of Native Trees: {el.count_native}</p>\r\n                    <p>Number of Species: {el.total_unique_species}</p>\r\n                    <p>Percent Native: {(100*parseInt(el.count_native)/parseInt(el.total_species)).toFixed(1)+\"%\"}</p>\r\n                    <Button onClick={() => handleSimilarityClick(el.greater_metro)} value={el.greater_metro} variant=\"outlined\" size=\"small\" color=\"primary\">\r\n                      Compare\r\n                    </Button>\r\n                </Popup>\r\n              </CircleMarker>\r\n            ));\r\n        } else if (stateMarker.globalfilter === 'Number Trees') {\r\n            return stateMarker.global.map((el, i) => (\r\n              <CircleMarker\r\n                key={i}\r\n                center={[el.latitude, el.longitude]}\r\n                radius={Math.log(parseInt(el.total_species))}\r\n                fillColor={getColorForPercentage(parseInt(el.total_species)/parseInt(max_num_trees))}\r\n                fillOpacity={1}\r\n                stroke={true}\r\n                color={'black'}\r\n                weight={1}\r\n              >\r\n                <Popup>\r\n                    <p>{el.greater_metro}</p>\r\n                    <p>Number of Trees: {el.total_species}</p>\r\n                    <p>Number of Native Trees: {el.count_native}</p>\r\n                    <p>Number of Species: {el.total_unique_species}</p>\r\n                    <p>Percent Native: {(100*parseInt(el.count_native)/parseInt(el.total_species)).toFixed(1)+\"%\"}</p>\r\n                    <Button onClick={() => handleSimilarityClick(el.greater_metro)} value={el.greater_metro} variant=\"outlined\" size=\"small\" color=\"primary\">\r\n                      Compare\r\n                    </Button>\r\n                </Popup>\r\n              </CircleMarker>\r\n            ));\r\n        }\r\n\r\n    } else if (stateMarker.view_status === \"city\" && stateMarker.city.length === 0)  {\r\n        return (\r\n            <div>\r\n                <Fab variant=\"extended\" onClick={handleclick} size=\"small\" color=\"primary\" aria-label=\"add\" className={classes.scanMargin}>\r\n                    Scan Area for Trees\r\n                </Fab>\r\n            </div>\r\n        )\r\n    } else if (stateMarker.view_status === \"city\" && stateMarker.city.length > 0) {\r\n        return (\r\n            <div>\r\n                <PixiOverlay markers={stateMarker.city} />\r\n                <Fab variant=\"extended\" onClick={handleclick} size=\"small\" color=\"primary\" aria-label=\"add\" className={classes.scanMargin}>\r\n                    Scan Area for Trees\r\n                </Fab>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n};\r\n\r\nexport default GetMarkers;","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\FreeDrawCustom.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Filters.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DataViewButtons.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawAnalysisSimilarity.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Upload.js",["92","93","94","95","96","97","98","99","100","101"],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\uploadSlice.js",["102","103"],"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\nimport { NONE } from 'react-leaflet-freedraw';\r\n\r\n// CREATE Thunk\r\nexport const uploadData = createAsyncThunk(\"upload/uploadData\", async (data, thunkAPI) => {\r\n    try {\r\n        const response = await axios.post('/api/post/data', data);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\n\r\n// CREATE SLICE\r\nconst uploadSlice = createSlice({\r\n  name: \"upload\",\r\n  initialState: {\r\n\r\n  },\r\n  reducers: {\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(uploadData.pending, (state) => {\r\n        console.log(\"test3\")\r\n    });\r\n    builder.addCase(uploadData.fulfilled, (state, { payload }) => {\r\n        console.log(\"test\")\r\n        console.log(payload);\r\n    });\r\n    builder.addCase(uploadData.rejected,(state, action) => {\r\n        console.log(\"test2\")\r\n    });\r\n  }\r\n});\r\n\r\nexport const {\r\n\r\n} = uploadSlice.actions;\r\n\r\nexport default uploadSlice",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":4,"column":8,"nodeType":"110","messageId":"111","endLine":4,"endColumn":18},{"ruleId":"108","severity":1,"message":"112","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":16},{"ruleId":"113","severity":1,"message":"114","line":25,"column":8,"nodeType":"115","endLine":25,"endColumn":18,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":101,"column":32,"nodeType":"119","messageId":"120","endLine":101,"endColumn":34},{"ruleId":"108","severity":1,"message":"121","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":25},{"ruleId":"108","severity":1,"message":"122","line":5,"column":10,"nodeType":"110","messageId":"111","endLine":5,"endColumn":16},{"ruleId":"108","severity":1,"message":"123","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":26},{"ruleId":"108","severity":1,"message":"124","line":3,"column":10,"nodeType":"110","messageId":"111","endLine":3,"endColumn":20},{"ruleId":"108","severity":1,"message":"125","line":4,"column":10,"nodeType":"110","messageId":"111","endLine":4,"endColumn":20},{"ruleId":"108","severity":1,"message":"126","line":7,"column":8,"nodeType":"110","messageId":"111","endLine":7,"endColumn":23},{"ruleId":"108","severity":1,"message":"127","line":24,"column":7,"nodeType":"110","messageId":"111","endLine":24,"endColumn":16},{"ruleId":"108","severity":1,"message":"128","line":60,"column":11,"nodeType":"110","messageId":"111","endLine":60,"endColumn":19},{"ruleId":"108","severity":1,"message":"129","line":63,"column":11,"nodeType":"110","messageId":"111","endLine":63,"endColumn":22},{"ruleId":"108","severity":1,"message":"130","line":64,"column":11,"nodeType":"110","messageId":"111","endLine":64,"endColumn":19},{"ruleId":"131","severity":1,"message":"132","line":128,"column":21,"nodeType":"133","messageId":"134","endLine":128,"endColumn":22,"suggestions":"135"},{"ruleId":"131","severity":1,"message":"132","line":128,"column":37,"nodeType":"133","messageId":"134","endLine":128,"endColumn":38,"suggestions":"136"},{"ruleId":"108","severity":1,"message":"137","line":3,"column":10,"nodeType":"110","messageId":"111","endLine":3,"endColumn":14},{"ruleId":"138","severity":1,"message":"139","line":38,"column":14,"nodeType":"140","messageId":"120","endLine":40,"endColumn":2},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","'MenuIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'stateMarker.endpoint'. Either include it or remove the dependency array.","ArrayExpression",["143"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'Marker' is defined but never used.","'useEffect' is defined but never used.","'makeStyles' is defined but never used.","'uploadData' is defined but never used.","'CloudUploadIcon' is defined but never used.","'buttonRef' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'stateMarker' is assigned a value but never used.","'stateMap' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["144","145"],["146","147"],"'NONE' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"messageId":"150","fix":"151","desc":"152"},{"messageId":"153","fix":"154","desc":"155"},{"messageId":"150","fix":"156","desc":"152"},{"messageId":"153","fix":"157","desc":"155"},"Update the dependencies array to be: [dispatch, stateMarker.endpoint]",{"range":"158","text":"159"},"removeEscape",{"range":"160","text":"161"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"162","text":"163"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"164","text":"161"},{"range":"165","text":"163"},[861,871],"[dispatch, stateMarker.endpoint]",[5070,5071],"",[5070,5070],"\\",[5086,5087],[5086,5086]]