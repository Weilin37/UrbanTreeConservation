[{"/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/index.js":"1","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/store/index.js":"2","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/App.js":"3","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/NavBar.js":"4","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/Map.js":"5","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/features/markerSlice.js":"6","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/features/mapSlice.js":"7","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/SearchBar.js":"8","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/DrawBounds.js":"9","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/RescanMarkers.js":"10","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/GetMarkers.js":"11"},{"size":279,"mtime":1607134147775,"results":"12","hashOfConfig":"13"},{"size":575,"mtime":1607661374535,"results":"14","hashOfConfig":"13"},{"size":573,"mtime":1607646143512,"results":"15","hashOfConfig":"13"},{"size":824,"mtime":1607415102683,"results":"16","hashOfConfig":"13"},{"size":4269,"mtime":1607718923247,"results":"17","hashOfConfig":"13"},{"size":2305,"mtime":1607718661992,"results":"18","hashOfConfig":"13"},{"size":2019,"mtime":1607718195019,"results":"19","hashOfConfig":"13"},{"size":2232,"mtime":1607718195018,"results":"20","hashOfConfig":"13"},{"size":688,"mtime":1607718676179,"results":"21","hashOfConfig":"13"},{"size":680,"mtime":1607718195018,"results":"22","hashOfConfig":"13"},{"size":1601,"mtime":1607718923244,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"i0zfl8",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/index.js",[],["50","51"],"/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/store/index.js",[],"/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/App.js",[],"/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/NavBar.js",[],"/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/Map.js",["52","53"],"import React, { useEffect } from \"react\";\nimport RescanMarkers from \"./RescanMarkers\";\nimport DrawBounds from \"./DrawBounds\";\nimport GetMarkers from \"./GetMarkers\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport \"../../css/app.css\";\nimport { useSelector, useDispatch, batch } from \"react-redux\";\nimport { getCities, getTrees, setEndpoint, clearTrees, setScan, setRadius } from \"../features/markerSlice\";\nimport { setSearchBounds, setZoom, setCenter } from \"../features/mapSlice\";\n\nexport const LeafMap = () => {\n    const dispatch = useDispatch();\n\n    // state\n    const stateMarker = useSelector(state => state.marker);\n    const stateMap = useSelector(state => state.map);\n\n    const clusterZoom = stateMarker.clusterZoom;\n    const treeZoom = stateMarker.treeZoom;\n\n    // Effects\n    useEffect(() => {\n        dispatch(getCities(\"/api/get/cities\"));\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (stateMap.zoom >= clusterZoom && stateMarker.scan_status === \"scanning\") {\n            console.log(\"api\")\n           dispatch(getTrees(stateMarker.endpoint));\n        }\n    }, [stateMarker.endpoint]);\n\n    function toRadian(degree) {\n        return degree*Math.PI/180;\n    }\n\n    function getDistance(origin, destination) {\n        // return distance in meters\n        var lon1 = toRadian(origin[1]),\n            lat1 = toRadian(origin[0]),\n            lon2 = toRadian(destination[1]),\n            lat2 = toRadian(destination[0]);\n\n        var deltaLat = lat2 - lat1;\n        var deltaLon = lon2 - lon1;\n\n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\n        var c = 2 * Math.asin(Math.sqrt(a));\n        var EARTH_RADIUS = 6371;\n        return c * EARTH_RADIUS * 1000;\n    }\n\n    function handlemoveend(e) {\n        const map = e.target;\n        const zoom = map.getZoom();\n        const lat = map.getCenter().lat;\n        const lng = map.getCenter().lng;\n\n        const bounds = map.getBounds();\n        const latNE = bounds['_northEast'].lat\n        const lngNE = bounds['_northEast'].lng\n        const radius = Math.round(0.5*getDistance([latNE, lngNE],[lat, lng]))\n        const distance_from_center = getDistance([lat, lng],[stateMap.previous_lat,stateMap.previous_lng])\n        const outOfBounds = (distance_from_center > stateMarker.radius)\n\n        if (zoom < clusterZoom) {\n            batch(() => {\n               console.log(\"cities\")\n               dispatch(clearTrees());\n               dispatch(setScan(\"waiting\"));\n               dispatch(setRadius(0));\n               dispatch(setCenter({lat:lat, lng:lng}));\n               dispatch(setZoom(zoom));\n               dispatch(setSearchBounds({latNE:0, lngNE:0}));\n               dispatch(setEndpoint({type:\"cities\"}))\n            });\n        }\n        else {\n            if (outOfBounds) {\n                console.log(\"outofbounds\")\n                batch(() => {\n                    dispatch(clearTrees());\n                    dispatch(setRadius(radius));\n                    dispatch(setScan(\"scanning\"));\n                    dispatch(setCenter({lat:lat, lng:lng}));\n                    dispatch(setZoom(zoom));\n                    dispatch(setEndpoint({type:\"trees\", lat:lat, lng:lng, radius:radius, limit:5000}));\n                    dispatch(setSearchBounds({latNE:latNE, lngNE:lngNE}));\n                });\n            }\n        }\n\n    }\n\n    // render component\n    if (stateMarker.cities.length > 0) {\n        return (\n            <Map onmoveend={handlemoveend} preferCanvas={true} center={[stateMap.lat, stateMap.lng]} zoom={stateMap.zoom} scrollWheelZoom={true}>\n              <TileLayer\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n              />\n              <DrawBounds />\n              <GetMarkers />\n              <RescanMarkers />\n            </Map>\n        );\n    } else {\n        return (\n            <Map center={[stateMap.lat, stateMap.lng]} zoom={stateMap.zoom} scrollWheelZoom={true}>\n              <TileLayer\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n              />\n              <RescanMarkers />\n            </Map>\n        );\n    }\n\n}","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/features/markerSlice.js",[],"/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/features/mapSlice.js",[],"/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/SearchBar.js",[],"/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/DrawBounds.js",[],"/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/RescanMarkers.js",["54"],"import { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport { useLeaflet } from \"react-leaflet\";\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n    top: theme.spacing(16),\n    left: theme.spacing(1),\n    position: 'fixed',\n    zIndex: 1000,\n  }\n}));\n\n\nconst RescanMarkers = () => {\n    // classes\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Fab size=\"small\" color=\"secondary\" aria-label=\"add\" className={classes.margin}>\n                <AddIcon />\n            </Fab>\n        </div>\n    );\n}\n\nexport default RescanMarkers;","/Users/mengwei/Documents/GitHub/UrbanTreeConservation/client/src/js/components/GetMarkers.js",["55","56"],"import { useSelector } from \"react-redux\";\nimport { useLeaflet, Circle } from \"react-leaflet\";\nimport { Marker, Popup } from \"react-leaflet\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\n\nconst GetMarkers = () => {\n    const stateMarker = useSelector(state => state.marker);\n    const { map } = useLeaflet();\n    const zoom = map._zoom;\n\n    if (zoom < stateMarker.clusterZoom){\n        return stateMarker.cities.map((el, i) => (\n          <Marker\n            key={i}\n            position={[el.latitude, el.longitude]}\n          >\n            <Popup>\n                <p>City: {el.city}</p>\n                <p>State: {el.state}</p>\n                <p>Number of Trees: {el.num_trees}</p>\n            </Popup>\n          </Marker>\n        ));\n    } else  {\n            return (\n            <MarkerClusterGroup disableClusteringAtZoom={stateMarker.treeZoom} spiderfyOnMaxZoom={false}>\n                {stateMarker.trees.map((el, i) => (\n                  <Circle key={i} center={[el.latitude, el.longitude]} radius={5} color={\"green\"}>\n                    <Popup>\n                        <p>City: {el.city}</p>\n                        <p>State: {el.state}</p>\n                        <p>Scientific Name: {el.scientific_name}</p>\n                        <p>Native: {el.native}</p>\n                        <p>Condition: {el.condition}</p>\n                        <p>Diameter Breast Height (CM): {el.diameter_breast_height_cm}</p>\n                    </Popup>\n                  </Circle>\n                ))}\n            </MarkerClusterGroup>\n            )\n    }\n};\n\nexport default GetMarkers;",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":19,"column":11,"nodeType":"63","messageId":"64","endLine":19,"endColumn":19},{"ruleId":"65","severity":1,"message":"66","line":31,"column":8,"nodeType":"67","endLine":31,"endColumn":30,"suggestions":"68"},{"ruleId":"61","severity":1,"message":"69","line":4,"column":10,"nodeType":"63","messageId":"64","endLine":4,"endColumn":20},{"ruleId":"70","severity":2,"message":"71","line":25,"column":14,"nodeType":"72","endLine":25,"endColumn":32},{"ruleId":"73","severity":2,"message":"74","line":25,"column":58,"nodeType":"63","messageId":"75","endLine":25,"endColumn":66},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'treeZoom' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clusterZoom', 'dispatch', 'stateMap.zoom', and 'stateMarker.scan_status'. Either include them or remove the dependency array.","ArrayExpression",["78"],"'useLeaflet' is defined but never used.","react/jsx-no-undef","'MarkerClusterGroup' is not defined.","JSXIdentifier","no-undef","'treeZoom' is not defined.","undef","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [clusterZoom, dispatch, stateMap.zoom, stateMarker.endpoint, stateMarker.scan_status]",{"range":"81","text":"82"},[1093,1115],"[clusterZoom, dispatch, stateMap.zoom, stateMarker.endpoint, stateMarker.scan_status]"]