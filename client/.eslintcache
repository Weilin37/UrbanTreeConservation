[{"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\index.js":"1","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\App.js":"2","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\store\\index.js":"3","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\NavBar.js":"4","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\mapSlice.js":"5","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Map.js":"6","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\markerSlice.js":"7","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\SearchBar.js":"8","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\RescanMarkers.js":"9","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawBounds.js":"10","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\GetMarkers.js":"11"},{"size":290,"mtime":1607204859726,"results":"12","hashOfConfig":"13"},{"size":588,"mtime":1607723585099,"results":"14","hashOfConfig":"13"},{"size":601,"mtime":1607723585108,"results":"15","hashOfConfig":"13"},{"size":848,"mtime":1607441961650,"results":"16","hashOfConfig":"13"},{"size":1655,"mtime":1607720498605,"results":"17","hashOfConfig":"13"},{"size":4027,"mtime":1607721903384,"results":"18","hashOfConfig":"13"},{"size":2785,"mtime":1607721761497,"results":"19","hashOfConfig":"13"},{"size":2386,"mtime":1607721725605,"results":"20","hashOfConfig":"13"},{"size":709,"mtime":1607717249926,"results":"21","hashOfConfig":"13"},{"size":704,"mtime":1607721940102,"results":"22","hashOfConfig":"13"},{"size":1687,"mtime":1607721870093,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9yxsz4",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\index.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\App.js",[],["48","49"],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\store\\index.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\NavBar.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\mapSlice.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\Map.js",["50","51"],"import React, { useEffect } from \"react\";\r\nimport RescanMarkers from \"./RescanMarkers\";\r\nimport DrawBounds from \"./DrawBounds\";\r\nimport GetMarkers from \"./GetMarkers\";\r\nimport { Map, TileLayer } from \"react-leaflet\";\r\nimport \"../../css/app.css\";\r\nimport { useSelector, useDispatch, batch } from \"react-redux\";\r\nimport { getCities, getTrees, setEndpoint, clearTrees, setScan, setRadius } from \"../features/markerSlice\";\r\nimport { setZoom, setCenter } from \"../features/mapSlice\";\r\n\r\nexport const LeafMap = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    // state\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const stateMap = useSelector(state => state.map);\r\n\r\n    const clusterZoom = stateMarker.clusterZoom;\r\n    const treeZoom = stateMarker.treeZoom;\r\n\r\n    // Effects\r\n    useEffect(() => {\r\n        dispatch(getCities(\"/api/get/cities\"));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (stateMap.zoom >= clusterZoom && stateMarker.scan_status === \"scanning\") {\r\n            console.log(\"api\")\r\n           dispatch(getTrees(stateMarker.endpoint));\r\n        }\r\n    }, [stateMarker.endpoint]);\r\n\r\n    function toRadian(degree) {\r\n        return degree*Math.PI/180;\r\n    }\r\n\r\n    function getDistance(origin, destination) {\r\n        // return distance in meters\r\n        var lon1 = toRadian(origin[1]),\r\n            lat1 = toRadian(origin[0]),\r\n            lon2 = toRadian(destination[1]),\r\n            lat2 = toRadian(destination[0]);\r\n\r\n        var deltaLat = lat2 - lat1;\r\n        var deltaLon = lon2 - lon1;\r\n\r\n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\r\n        var c = 2 * Math.asin(Math.sqrt(a));\r\n        var EARTH_RADIUS = 6371;\r\n        return c * EARTH_RADIUS * 1000;\r\n    }\r\n\r\n    function handlemoveend(e) {\r\n        const map = e.target;\r\n        const zoom = map.getZoom();\r\n        const lat = map.getCenter().lat;\r\n        const lng = map.getCenter().lng;\r\n\r\n        const bounds = map.getBounds();\r\n        const latNE = bounds['_northEast'].lat\r\n        const lngNE = bounds['_northEast'].lng\r\n        const radius = Math.round(0.5*getDistance([latNE, lngNE],[lat, lng]))\r\n        const distance_from_center = getDistance([lat, lng],[stateMap.previous_lat,stateMap.previous_lng])\r\n        const outOfBounds = (distance_from_center > stateMarker.radius)\r\n\r\n        if (zoom < clusterZoom) {\r\n            batch(() => {\r\n               console.log(\"cities\")\r\n               dispatch(clearTrees());\r\n               dispatch(setScan(\"waiting\"));\r\n               dispatch(setRadius(0));\r\n               dispatch(setCenter({lat:lat, lng:lng}));\r\n               dispatch(setZoom(zoom));\r\n               dispatch(setSearchBounds({latNE:0, lngNE:0}));\r\n               dispatch(setEndpoint({type:\"cities\"}))\r\n            });\r\n        }\r\n        else {\r\n            if (outOfBounds) {\r\n                console.log(\"outofbounds\")\r\n                batch(() => {\r\n                    dispatch(clearTrees());\r\n                    dispatch(setRadius(radius));\r\n                    dispatch(setScan(\"scanning\"));\r\n                    dispatch(setCenter({lat:lat, lng:lng}));\r\n                    dispatch(setZoom(zoom));\r\n                    dispatch(setEndpoint({type:\"trees\", lat:lat, lng:lng, radius:radius, limit:5000}));\r\n                    dispatch(setSearchBounds({latNE:latNE, lngNE:lngNE}));\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // render component\r\n    if (stateMarker.cities.length > 0) {\r\n        return (\r\n            <Map onmoveend={handlemoveend} preferCanvas={true} center={[stateMap.lat, stateMap.lng]} zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n              <DrawBounds />\r\n              <GetMarkers />\r\n              <RescanMarkers />\r\n            </Map>\r\n        );\r\n    } else {\r\n        return (\r\n            <Map center={[stateMap.lat, stateMap.lng]} zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n              <RescanMarkers />\r\n            </Map>\r\n        );\r\n    }\r\n\r\n}","C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\features\\markerSlice.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\SearchBar.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\RescanMarkers.js",["52"],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\DrawBounds.js",[],"C:\\Users\\Weilin\\Documents\\GitHub\\UrbanTreeConservation\\client\\src\\js\\components\\GetMarkers.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":19,"column":11,"nodeType":"59","messageId":"60","endLine":19,"endColumn":19},{"ruleId":"61","severity":1,"message":"62","line":31,"column":8,"nodeType":"63","endLine":31,"endColumn":30,"suggestions":"64"},{"ruleId":"57","severity":1,"message":"65","line":4,"column":10,"nodeType":"59","messageId":"60","endLine":4,"endColumn":20},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'treeZoom' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clusterZoom', 'dispatch', 'stateMap.zoom', and 'stateMarker.scan_status'. Either include them or remove the dependency array.","ArrayExpression",["68"],"'useLeaflet' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [clusterZoom, dispatch, stateMap.zoom, stateMarker.endpoint, stateMarker.scan_status]",{"range":"71","text":"72"},[1123,1145],"[clusterZoom, dispatch, stateMap.zoom, stateMarker.endpoint, stateMarker.scan_status]"]